{
  "ver": "1.0.25",
  "uuid": "96511263-001d-4eee-a745-ef41b21293a8",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform float tileZoom;\nattribute vec3 a_position;\nattribute vec2 a_uv0;\nvarying mediump vec2 v_uv0;\nuniform mat4 cc_matWorld;\nuniform mat4 cc_matViewProj;\nuniform vec4 cc_cameraPos;\n#if USE_FOG\n  varying float v_cameraDist;\n#endif\nvoid main () {\n  vec4 position = vec4(a_position,1.0);\n  #if USE_FOG\n    vec3 v_worldPos = (cc_matWorld * position).xyz;\n    vec3 vector = cc_cameraPos.xyz-v_worldPos;\n    v_cameraDist = sqrt(vector.x * vector.x + vector.y * vector.y + vector.z * vector.z);\n  #endif\n  v_uv0 = a_uv0 * tileZoom;\n  gl_Position = cc_matViewProj * cc_matWorld * position;\n}",
        "frag": "\nprecision highp float;\nuniform vec4 cc_time;\nuniform sampler2D mainTexture;\nvarying mediump vec2 v_uv0;\nuniform float timeZoom;\n#if USE_NORMALMAP\n  uniform sampler2D normalMap;\n  uniform float normalZoom;\nuniform float normalStre;\n#endif\n#if USE_COLOR\n  uniform vec4 color;\nuniform float colorMul;\n#endif\n#if USE_FOG\n  varying float v_cameraDist;\n#endif\nvec2 waveNormal(vec2 p) {\n  vec2 nm = texture2D(normalMap, p).xy * normalStre;\n  return nm;\n}\nvoid main () {\n  float t = timeZoom * cc_time.x;\n  vec2 uv1 = vec2(v_uv0.x + t , v_uv0.y);\n  vec2 uv2 = vec2(v_uv0.x - t + 0.3, v_uv0.y + 0.2);\n  #if USE_NORMALMAP\n    vec2 nor = waveNormal(v_uv0 * normalZoom);\n    uv1 += nor;\n    uv2 += nor;\n  #endif\n  vec4 o = texture2D(mainTexture, uv1) + texture2D(mainTexture, uv2);\n  #if USE_COLOR\n    vec4 c = color * vec4(colorMul,colorMul,colorMul,1.0);\n    o *= c;\n  #endif\n  #if USE_FOG\n    vec4 fogColor = vec4(120.0/255.0,230.0/255.0,250.0/255.0,1.0);\n    float fogIntensity = 1.0;\n    float startDist = 1000.0;\n    float endDist = 8000.0;\n    if ( v_cameraDist > endDist )\n      fogIntensity = 0.0;\n    else if ( v_cameraDist < startDist )\n      fogIntensity = 1.0;\n    else\n      fogIntensity = (endDist-v_cameraDist)/(endDist-startDist);\n    o.rgb = mix(fogColor.rgb,o.rgb,fogIntensity);\n  #endif\n  gl_FragColor = o;\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform MAIN {\n  float tileZoom;\n};\nin vec3 a_position;\nin vec2 a_uv0;\nout mediump vec2 v_uv0;\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matViewProj;\n  vec4 cc_cameraPos;\n};\n#if USE_FOG\n  out float v_cameraDist;\n#endif\nvoid main () {\n  vec4 position = vec4(a_position,1.0);\n  #if USE_FOG\n    vec3 v_worldPos = (cc_matWorld * position).xyz;\n    vec3 vector = cc_cameraPos.xyz-v_worldPos;\n    v_cameraDist = sqrt(vector.x * vector.x + vector.y * vector.y + vector.z * vector.z);\n  #endif\n  v_uv0 = a_uv0 * tileZoom;\n  gl_Position = cc_matViewProj * cc_matWorld * position;\n}",
        "frag": "\nprecision highp float;\nuniform CCGlobal {\n  vec4 cc_time;\n};\nuniform sampler2D mainTexture;\nin mediump vec2 v_uv0;\nuniform SOMETHING {\n    float timeZoom;\n};\n#if USE_NORMALMAP\n  uniform sampler2D normalMap;\n  uniform NOR {\n    float normalZoom;\n    float normalStre;\n  };\n#endif\n#if USE_COLOR\n  uniform Constant {\n    vec4 color;\n    float colorMul;\n  };\n#endif\n#if USE_FOG\n  in float v_cameraDist;\n#endif\nvec2 waveNormal(vec2 p) {\n  vec2 nm = texture2D(normalMap, p).xy * normalStre;\n  return nm;\n}\nvoid main () {\n  float t = timeZoom * cc_time.x;\n  vec2 uv1 = vec2(v_uv0.x + t , v_uv0.y);\n  vec2 uv2 = vec2(v_uv0.x - t + 0.3, v_uv0.y + 0.2);\n  #if USE_NORMALMAP\n    vec2 nor = waveNormal(v_uv0 * normalZoom);\n    uv1 += nor;\n    uv2 += nor;\n  #endif\n  vec4 o = texture(mainTexture, uv1) + texture(mainTexture, uv2);\n  #if USE_COLOR\n    vec4 c = color * vec4(colorMul,colorMul,colorMul,1.0);\n    o *= c;\n  #endif\n  #if USE_FOG\n    vec4 fogColor = vec4(120.0/255.0,230.0/255.0,250.0/255.0,1.0);\n    float fogIntensity = 1.0;\n    float startDist = 1000.0;\n    float endDist = 8000.0;\n    if ( v_cameraDist > endDist )\n      fogIntensity = 0.0;\n    else if ( v_cameraDist < startDist )\n      fogIntensity = 1.0;\n    else\n      fogIntensity = (endDist-v_cameraDist)/(endDist-startDist);\n    o.rgb = mix(fogColor.rgb,o.rgb,fogIntensity);\n  #endif\n  gl_FragColor = o;\n}"
      }
    }
  ],
  "subMetas": {}
}